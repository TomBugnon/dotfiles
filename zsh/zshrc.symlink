#!/usr/bin/env zsh
# vim: sw=2 ts=2 sts=2 tw=80 foldmarker={,} foldlevel=0 foldmethod=marker
#
# zshrc of tbugnon


# TODO: source all .zsh files?

OS=$(uname -s)


# ENVIRONMENT VARIABLES
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Environment variables {

  # Source environment variables immediately
  source ~/.globalenv

  # Source machine-specific environment variables
  source ~/.globalenv
  if [[ -f ~/.globalenv-$HOST ]]; then
     source ~/.globalenv-$HOST
  fi

# }

# PATH
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# PATH {
  if [ "$OS" = "Darwin" ]; then
    # Executables from `pip install --user`
    export PATH="$HOME/Library/Python/3.7/bin:$PATH"
  fi
  # User-local executables
  export PATH="$HOME/.local/bin:$PATH"
  # Ensure /usr/local/bin is early
  export PATH="/usr/local/bin:$PATH"
  # Dotfile executables
  export PATH="$HOME/dotfiles/bin:$PATH"
  # Local executables
  export PATH="$HOME/bin:$PATH"
# }

# Python
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Python {

  # virtualenvwrapper {
    export WORKON_HOME="$HOME/.virtualenvs"
    export PROJECT_HOME="$CODE"
    if [ "$OS" = "Darwin" ]; then
      export VIRTUALENV_PYTHON="$(which python)"
      export VIRTUALENVWRAPPER_PYTHON="$(which python)"
    else
      export VIRTUALENV_PYTHON="/usr/bin/python"
      export VIRTUALENVWRAPPER_PYTHON="/usr/bin/python"
    fi
    export VIRTUAL_ENV_DISABLE_PROMPT=1
    source "$(which virtualenvwrapper.sh)"
    # Auto-set VIRTUAL_ENV in tmux
    if [[ -n "$TMUX" ]] && [ -n "$VIRTUAL_ENV" ]; then
      tmux set-environment VIRTUAL_ENV $VIRTUAL_ENV
    fi
    # Activate VIRTUAL_ENV if set
    if [ -n "$VIRTUAL_ENV" ]; then
      source $VIRTUAL_ENV/bin/activate
    fi
  # }

  # startup {

    export PYTHONSTARTUP=${HOME}/.pythonstartup.py

  # }
# }


# OH-MY-ZSH
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# oh-my-zsh {

  # Path to your oh-my-zsh configuration
  ZSH=$HOME/.oh-my-zsh

  # Path to your oh-my-zsh custom directory (default is .oh-my-zsh/custom/)
  ZSH_CUSTOM=.oh-my-zsh/custom

  # Set name of the theme to load.
  # Look in ~/.oh-my-zsh/themes/
  # Optionally, if you set this to "random", it'll load a random theme each
  # time that oh-my-zsh is loaded.
  # ZSH_THEME="wmayner"

  # Set to this to use case-sensitive completion
  # CASE_SENSITIVE="true"

  # Comment this out to disable bi-weekly auto-update checks
  DISABLE_AUTO_UPDATE="true"

  # Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
  export UPDATE_ZSH_DAYS=14

  # Uncomment following line if you want to disable colors in ls
  # DISABLE_LS_COLORS="true"

  # Uncomment following line if you want to disable autosetting terminal title.
  DISABLE_AUTO_TITLE="true"

  # Uncomment following line if you want red dots to be displayed while waiting for completion
  COMPLETION_WAITING_DOTS="true"

  # Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
  # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
  # Example format: plugins=(rails git textmate ruby lighthouse)
  #grunt
  plugins=(brew coffee command-not-found git github git-flow git-extras git-hubflow rake history-substring-search vundle fasd osx virtualenvwrapper terminalapp python pip lol)

  source $ZSH/oh-my-zsh.sh

# }

# Keybindings
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Keybindings {
  # Use vi to edit command line
  bindkey -v

  # Remove delay in entering command mode, as described by
  # http://zsh.sourceforge.net/Guide/zshguide04.html:
  #
  # You can remove all bindings starting with a given prefix by adding the `-p
  # option. The example given in the manual,
  #     bindkey -rpM viins '\e'
  # (except it uses the equivalent form `^[') is amongst the most useful, as it
  # will remove the annoying delay after you type `\e' to enter vi command mode.
  # The delay is there because the cursor keys usually also start with \e and
  # the shell is waiting to see if you actually typed one of those.
  # bindkey -rpM viins "\e"

  # Use control+j and control+k for scrolling through history, since removing
  # all bindings that begin with escape also removes the arrow-key bindings
  bindkey "^K" history-substring-search-up
  bindkey "^J" history-substring-search-down

  # Press Ctrl+Q to push the current command on to the stack. It will disappear,
  # allowing you to enter another command, after which it will reappear in the
  # prompt.
  bindkey "^Q" push-input
# }

# Customize to your needs...
# =============================================================================

# Tool configuration {

  # gpg {
    export GPG_TTY=$(tty)
  # }

  # zsh {
    # Use extended globbing
    setopt extendedglob
  # }

  # Homebrew {
    export HOMEBREW_NO_ANALYTICS=1
  # }

  # powerline {
    if [ "$OS" = "Darwin" ]; then
      source "$HOME/Library/Python/3.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh"
    else
      source "$HOME/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh"
    fi
    export PYTHONPATH="$PYTHONPATH:$HOME/.config/powerline/"
    powerline-daemon --quiet
  # }

  # dircolors {
    autoload colors;
    # Find the option for using colors in ls, depending on the version
    ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=auto -F' || alias ls='ls -GF'
    # Use dircolors if available
    dircolors &>/dev/null 2>&1 && eval `dircolors $DOTFILES/zsh/dircolors.ansi-dark` || export LSCOLORS="Gxfxcxdxbxegedabagacad"
    # Use GNU ls if available (for macOS: `brew install coreutils`)
    gdircolors &>/dev/null 2>&1 && eval `gdircolors $DOTFILES/zsh/dircolors.ansi-dark` && alias ls='gls --color=auto -hF'
    export GREP_COLOR='1;31'
  # }

  # git {
    # Fix slow tab completion
    __git_files () {
        _wanted files expl 'local files' _files
    }
  # }

  # less {
    # Pygmentize less automatically
    # (requires pygmentize to be available; `pip install pygments`)
    export LESSOPEN='|$HOME/.lessfilter %s'
  # }

  # teamocil {
    # Set up completions
    compctl -g '$HOME/.teamocil/*(:t:r)' teamocil
  # }

  # SHELLSHOCK {
    # To anyone worried about using servers that may not have attentive admins -
    # put the following line(s) in your ~/.bashrc to help protect yourself:

    env x='() { :;}; echo "WARNING: SHELLSHOCK DETECTED"' \
      bash --norc -c ':' 2>/dev/null;

    # It will print to stdout if and only if your shell is vulnerable, and nothing
    # will be printed if your shell has been patched. It will take a little longer
    # to launch a new shell slightly, but for some, this may be worth it.
  # }

  # nvm {
    export NVM_DIR="$HOME/.nvm"

    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    # This loads nvm bash_completion
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  # }

  # node {
    # Grunt task tab-completion
    command -v grunt >/dev/null && eval "$(grunt --completion=zsh)"
    # Gulp task tab-completion
    command -v gulp >/dev/null && eval "$(gulp --completion=zsh)"
  # }

  # fasd {
    # Don't limit characters between matches
    export _FASD_FUZZY=100
    # Initialize
    eval "$(fasd --init auto)"
  # }

  # iterm {
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
  # }

  # zmv (alternative to mmv) {
    autoload zmv
  # }

  # travis {
    [ -f "$HOME/.travis/travis.sh" ] && source "$HOME/.travis/travis.sh"
  # }

  # fzy {
    function insert-fzy-path-in-command-line() {
      local selected_path
      echo # Run fzy underneath the current prompt
      selected_path=$(ag . -l -g '' | fzy) || return
      LBUFFER="$LBUFFER${(q)selected_path} " # ${(q)VAR} shell-escapes the string
      zle reset-prompt
      }
    zle -N insert-fzy-path-in-command-line

    # By default, ^S freezes terminal output, only needed if keybinding is ^S
    unsetopt flowcontrol
    bindkey "^S" "insert-fzy-path-in-command-line"
  # }

  # fzf {
    _gen_fzf_default_opts() {
      local base03="234"
      local base02="235"
      local base01="240"
      local base00="241"
      local base0="244"
      local base1="245"
      local base2="254"
      local base3="230"
      local yellow="136"
      local orange="166"
      local red="160"
      local magenta="125"
      local violet="61"
      local blue="33"
      local cyan="37"
      local green="64"

      # Comment and uncomment below for the light theme.

      # Solarized Dark color scheme for fzf
      export FZF_DEFAULT_OPTS="
        --reverse
        --color fg:-1,bg:-1,hl:$blue,fg+:$base2,bg+:$base02,hl+:$blue
        --color info:$yellow,prompt:$yellow,pointer:$base3,marker:$base3,spinner:$yellow
      "
      ## Solarized Light color scheme for fzf
      #export FZF_DEFAULT_OPTS="
      #  --color fg:-1,bg:-1,hl:$blue,fg+:$base02,bg+:$base2,hl+:$blue
      #  --color info:$yellow,prompt:$yellow,pointer:$base03,marker:$base03,spinner:$yellow
      #"
    }
    _gen_fzf_default_opts

    # Accept history selection instead of putting it on the command line
    fzf-history-widget-accept() {
      fzf-history-widget
      zle accept-line
    }
    zle     -N     fzf-history-widget-accept
    bindkey '^X^R' fzf-history-widget-accept

    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
  # }

# }

# ALIASES
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Aliases {

  source ~/.aliases
  # Source machine-specific aliases
  if [[ -f ~/.aliases-$HOST ]]; then
     source ~/.aliases-$HOST
  fi
  # macOS {
    if [ "$OS" = "Darwin" ]; then
      # Use GNU readlink
      alias readlink="greadlink"
      # Use color with grep
      alias grep="grep --color"
    else
      alias grep="grep --color"
    fi
  # }

# }

# PRIVATE CONFIG
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# zshrc.local {

  # Use .localrc for SUPER SECRET CRAP that you don't
  # want in your public, versioned repo.
  if [[ -a ~/.zshrc.local ]]
  then
    source ~/.zshrc.local
  fi

# }


# $(HOST) SPECIFIC CONFIG
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# machine config {

  if [[ -f ~/.zshrc-$HOST ]]; then
     [[ ! -f ~/.zshrc-$HOST.zwc || ~/.zshrc-$HOST -nt ~/.zshrc-$HOST.zwc ]] && { zcompile ~/.zshrc-$HOST; print - compiled \~/.zshrc-$HOST. }
     source ~/.zshrc-$HOST
  fi

# }
